import AsyncStorage from '@react-native-async-storage/async-storage';
import { getApiBase } from './apiConfig';

export const updateWorkOrderStatus = async (selectedWorkOrder, newStatus) => {
  try {
    // 1) V√©rifications de base
    if (!selectedWorkOrder) {
      throw new Error("‚ùå Erreur : Aucune donn√©e de Work Order re√ßue.");
    }

    const workorderid = selectedWorkOrder.workorderid;
    const currentStatus = selectedWorkOrder.status;

    if (!workorderid) {
      throw new Error("‚ùå Erreur : Impossible de r√©cup√©rer `workorderid`.");
    }
    if (!currentStatus) {
      throw new Error("‚ùå Erreur : Impossible de r√©cup√©rer le statut actuel.");
    }
    if (!newStatus) {
      throw new Error("‚ùå Erreur : Nouveau statut manquant.");
    }

    // 2) Construction de l‚ÄôURL d‚Äôupdate (√† adapter selon votre configuration)
    const apiBase = await getApiBase();

    const updateUrl = `${apiBase}/${workorderid}?properties=status&lean=1`;

    // 3) R√©cup√©ration du sessionCookie stock√© (si n√©cessaire pour l‚Äôauthentification Maximo)
    const storedData = await AsyncStorage.getItem('userData');
    const { sessionCookie } = JSON.parse(storedData) || {};

    // 4) Appel √† l‚ÄôAPI Maximo
    const response = await fetch(updateUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-method-override': 'PATCH',  // Pour patcher le Work Order
        'Accept': 'application/json',
        'Cookie': `JSESSIONID=${sessionCookie}` // Authentification par cookie
      },
      body: JSON.stringify({ status: newStatus })
    });

    // 5) Gestion des erreurs de r√©ponse
    if (!response.ok) {
      let errorData = null;
      try {
        errorData = await response.json();
      } catch (e) {
        // La r√©ponse est peut-√™tre vide ou non-JSON
      }

      // On essaie de r√©cup√©rer un message d'erreur lisible
      let errorMessage = "Erreur inconnue lors de la mise √† jour";
      if (errorData?.Error?.message) {
        errorMessage = errorData.Error.message;
      } else if (errorData?.errorText) {
        errorMessage = errorData.errorText;
      }
      throw new Error(`‚õî Maximo : ${errorMessage}`);
    }

    // 6) Tenter de parser la r√©ponse JSON
    let data;
    try {
      data = await response.json();
    } catch (e) {
      data = {};
    }

    console.log("‚úÖ R√©ponse API Maximo re√ßue :", data);

    // 7) Retour d‚Äôune r√©ponse personnalis√©e
    return {
      success: true,
      message: `‚úÖ Statut mis √† jour en ${newStatus}`,
      data
    };

  } catch (error) {
    console.error("üö® Une erreur est survenue:", error.message);
    return {
      success: false,
      error: error.message
    };
  }
};
